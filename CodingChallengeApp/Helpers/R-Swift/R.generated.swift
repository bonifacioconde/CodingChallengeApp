//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `README.md`.
    static let readmeMd = Rswift.FileResource(bundle: R.hostingBundle, name: "README", pathExtension: "md")
    /// Resource file `detail.json`.
    static let detailJson = Rswift.FileResource(bundle: R.hostingBundle, name: "detail", pathExtension: "json")
    /// Resource file `search.json`.
    static let searchJson = Rswift.FileResource(bundle: R.hostingBundle, name: "search", pathExtension: "json")
    
    /// `bundle.url(forResource: "README", withExtension: "md")`
    static func readmeMd(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readmeMd
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "detail", withExtension: "json")`
    static func detailJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.detailJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "search", withExtension: "json")`
    static func searchJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.searchJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `ic-large-movie-poster`.
    static let icLargeMoviePoster = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-large-movie-poster")
    /// Image `ic-small-movie-poster`.
    static let icSmallMoviePoster = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-small-movie-poster")
    
    /// `UIImage(named: "ic-large-movie-poster", bundle: ..., traitCollection: ...)`
    static func icLargeMoviePoster(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icLargeMoviePoster, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-small-movie-poster", bundle: ..., traitCollection: ...)`
    static func icSmallMoviePoster(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icSmallMoviePoster, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AlbumCell`.
    static let albumCell: Rswift.ReuseIdentifier<AlbumCell> = Rswift.ReuseIdentifier(identifier: "AlbumCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let detailController = StoryboardViewControllerResource<DetailController>(identifier: "DetailController")
      let masterController = StoryboardViewControllerResource<MasterController>(identifier: "MasterController")
      let name = "Main"
      
      func detailController(_: Void = ()) -> DetailController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: detailController)
      }
      
      func masterController(_: Void = ()) -> MasterController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: masterController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.main().detailController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'detailController' could not be loaded from storyboard 'Main' as 'DetailController'.") }
        if _R.storyboard.main().masterController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'masterController' could not be loaded from storyboard 'Main' as 'MasterController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
